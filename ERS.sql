-- CREATION OF TABLE---------------------------------------------------------------------------------------------------------
-- 1. Create Tables
CREATE TABLE Venue (
    venue_id INT PRIMARY KEY,
    state VARCHAR(50),
    city VARCHAR(50),
    location VARCHAR(100),
    capacity INT,
    cost DECIMAL(10, 2)
);

CREATE TABLE Event (
    event_id INT PRIMARY KEY,
    event_type VARCHAR(50),
    event_time TIME,
    event_date DATE,
    venue_id INT,
    FOREIGN KEY (venue_id) REFERENCES Venue(venue_id)
);

CREATE TABLE Audience (
    audience_id INT PRIMARY KEY,
    fname VARCHAR(50),
    lname VARCHAR(50),
    age INT,
    contact VARCHAR(15),
    email VARCHAR(50)
);

CREATE TABLE Organisers (
    organiser_id INT PRIMARY KEY,
    full_name VARCHAR(100),
    address VARCHAR(100),
    contact VARCHAR(15),
    email VARCHAR(50)
);

CREATE TABLE Tickets (
    ticket_id INT PRIMARY KEY,
    event_id INT,
    audience_id INT,
    price DECIMAL(10, 2),
    availability VARCHAR(20),
    FOREIGN KEY (event_id) REFERENCES Event(event_id),
    FOREIGN KEY (audience_id) REFERENCES Audience(audience_id)
);

CREATE TABLE Feedback (
    feedback_id INT PRIMARY KEY,
    Comment TEXT,
    audience_id INT,
    organiser_id INT,
    event_id INT,
    FOREIGN KEY (event_id) REFERENCES Event(event_id),
    FOREIGN KEY (audience_id) REFERENCES Audience(audience_id),
    FOREIGN KEY (organiser_id) REFERENCES Organisers(organiser_id)
);

CREATE TABLE Revenue (
    revenue_id INT PRIMARY KEY,
    amount DECIMAL(10, 2),
    event_id INT,
    venue_id INT,
    organiser_id INT,
    FOREIGN KEY (event_id) REFERENCES Event(event_id),
    FOREIGN KEY (venue_id) REFERENCES Venue(venue_id),
    FOREIGN KEY (organiser_id) REFERENCES Organisers(organiser_id)
);
-- ---------------------------------------------------------------------------------------------------------


-- DELETION-----------------------------------------------------------------------------------------------------------
-- Disable foreign key checks to allow dropping tables with dependencies
SET FOREIGN_KEY_CHECKS = 0;

-- Drop all tables
DROP TABLE IF EXISTS Revenue;
DROP TABLE IF EXISTS Feedback;
DROP TABLE IF EXISTS Tickets;
DROP TABLE IF EXISTS Event;
DROP TABLE IF EXISTS Audience;
DROP TABLE IF EXISTS Organisers;
DROP TABLE IF EXISTS Venue;

-- Re-enable foreign key checks
SET FOREIGN_KEY_CHECKS = 1;
-- -------------------------------------------------------------------------------------------------------------


-- QUERIES------------------------------------------------------------------------------------------------------

-- Find the total revenue generated by each event
SELECT E.event_type, SUM(R.amount) AS total_revenue
FROM Revenue R
JOIN Event E ON R.event_id = E.event_id
GROUP BY E.event_type;

-- Retrieve the list of all attendees for a specific event
SELECT A.fname, A.lname
FROM Tickets T
JOIN Audience A ON T.audience_id = A.audience_id
WHERE T.event_id = 1;

-- Retrieve Events with Total Ticket Sales Above a Certain Threshold
SELECT E.event_type, SUM(T.price) AS total_sales
FROM Tickets T
JOIN Event E ON T.event_id = E.event_id
GROUP BY E.event_type
HAVING SUM(T.price) > 50;

-- Find Average Age of Attendees for Each Event
SELECT E.event_type, AVG(A.age) AS avg_age
FROM Tickets T
JOIN Audience A ON T.audience_id = A.audience_id
JOIN Event E ON T.event_id = E.event_id
GROUP BY E.event_type;

-- Find Events with Feedback from Attendees Over Age 30
SELECT E.event_type, A.fname, A.lname, F.comment
FROM Feedback F
JOIN Audience A ON F.audience_id = A.audience_id
JOIN Event E ON F.event_id = E.event_id
WHERE A.age > 20;

-- Count Events by Venue with Average Cost and Total Capacity
SELECT V.state, V.city, COUNT(E.event_id) AS total_events, AVG(V.cost) AS avg_cost, 
SUM(V.capacity) AS total_capacity
FROM Venue V
LEFT JOIN Event E ON V.venue_id = E.venue_id
GROUP BY V.state, V.city;

-- List Top Three Most Expensive Tickets by Event Type
SELECT E.event_type, T.ticket_id, T.price
FROM Tickets T
JOIN Event E ON T.event_id = E.event_id
ORDER BY E.event_type, T.price DESC
LIMIT 3;

-- Identify Events with Feedback Keywords (e.g., "Amazing" or "Better")
SELECT E.event_type, F.comment
FROM Feedback F
JOIN Event E ON F.event_id = E.event_id
WHERE F.comment LIKE '%Amazing%' OR F.comment LIKE '%Better%';

-- Calculate Profit Margin by Event (Revenue - Venue Cost)
SELECT E.event_type, SUM(R.amount) AS revenue, V.cost, (SUM(R.amount) - V.cost) AS profit_margin
FROM Revenue R
JOIN Event E ON R.event_id = E.event_id
JOIN Venue V ON R.venue_id = V.venue_id
GROUP BY E.event_type, V.cost;

-- ---------------------------------------------------------------------------------------------------------